name: Build and Release Android App

env:
  APP_NAME: Champ Kernel Manager

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'beta'
        type: choice
        options:
          - alpha
          - beta
          - stable

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.vars.outputs.commit_hash }}
      date_today: ${{ steps.vars.outputs.date_today }}
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        id: vars
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "build_number=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Get version info
        id: version
        run: |
          VERSION_NAME=$(grep -oP 'versionName "\K[^"]+' app/build.gradle || echo "1.0.0")
          VERSION_CODE=$(grep -oP 'versionCode \K\d+' app/build.gradle || echo "1")
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test --parallel

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: app/build/reports/tests/
          retention-days: 7
          if-no-files-found: ignore

  build:
    name: Build App
    needs: test
    runs-on: ubuntu-latest
    outputs:
      scan_results: ${{ steps.scan_apks.outputs.scan_results }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Setup signing
        id: signing
        env:
          SIGNING_KEYSTORE_B64: ${{ secrets.SIGNING_KEYSTORE_B64 }}
        run: |
          if [ -n "$SIGNING_KEYSTORE_B64" ]; then
            echo "Keystore provided, configuring signing..."
            mkdir -p $HOME/keystore/
            echo "$SIGNING_KEYSTORE_B64" | base64 --decode > $HOME/keystore/release-key.jks
            echo "keystore_path=$HOME/keystore/release-key.jks" >> $GITHUB_OUTPUT
            echo "signing_configured=true" >> $GITHUB_OUTPUT
          else
            echo "No keystore provided, using debug signing..."
            echo "signing_configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Debug & Release in parallel
        run: |
          # Run builds in parallel
          ./gradlew assembleDebug bundleDebug --parallel &
          PID1=$!
          
          if [ "${{ steps.signing.outputs.signing_configured }}" == "true" ]; then
            ./gradlew assembleRelease bundleRelease \
              -Pandroid.injected.signing.store.file=${{ steps.signing.outputs.keystore_path }} \
              -Pandroid.injected.signing.store.password=${{ secrets.STORE_PASSWORD }} \
              -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
              -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} \
              --parallel &
          else
            ./gradlew assembleRelease bundleRelease --parallel &
          fi
          PID2=$!
          
          wait $PID1 $PID2
          if [ $? -ne 0 ]; then
            echo "::error::Build process failed"
            exit 1
          fi

      - name: Install AAPT2
        run: |
          sudo apt-get update
          sudo apt-get install -y aapt

      - name: Extract APK information
        id: apk_info
        run: |
          mkdir -p apk_info
          echo "Processing APKs and extracting architecture information..."
          
          echo "APK_INFO_JSON={\"files\":[]}" > apk_info.json
          
          for APK_PATH in $(find app/build/outputs/apk -name "*.apk"); do
            APK_NAME=$(basename "$APK_PATH")
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            
            # Use aapt to get architectures
            ARCHS=$(aapt list -a "$APK_PATH" | grep "native-code" | grep -oP '/\K[^/]+(?=/)' | sort | uniq | tr '\n' ',' | sed 's/,$//')
            
            if [ -z "$ARCHS" ]; then
              ARCHS="universal"
            fi
            
            # Calculate SHA-256 hash
            SHA256=$(sha256sum "$APK_PATH" | cut -d' ' -f1)
            
            # Get variant name (debug/release)
            if [[ "$APK_PATH" == *"debug"* ]]; then
              VARIANT="debug"
            else
              VARIANT="release"
            fi
            
            # Add to JSON
            APK_INFO_JSON=$(echo "$APK_INFO_JSON" | jq --arg path "$APK_PATH" --arg name "$APK_NAME" --arg size "$APK_SIZE" --arg arch "$ARCHS" --arg variant "$VARIANT" --arg sha256 "$SHA256" \
              '.files += [{"path":$path,"name":$name,"size":$size,"architecture":$arch,"variant":$variant,"sha256":$sha256,"virus_total":null}]')
            
            echo "$APK_INFO_JSON" > apk_info.json
            
            echo "Processed: $APK_NAME ($ARCHS, $VARIANT)"
          done
          
          cat apk_info.json

      - name: Scan APKs with VirusTotal
        id: scan_apks
        env:
          VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        run: |
          if [ -n "$VIRUSTOTAL_API_KEY" ]; then
            echo "Starting VirusTotal scan for APKs..."
            
            APK_INFO_JSON=$(cat apk_info.json)
            
            for i in $(echo "$APK_INFO_JSON" | jq -r '.files | keys | .[]'); do
              APK_PATH=$(echo "$APK_INFO_JSON" | jq -r ".files[$i].path")
              
              if [ -f "$APK_PATH" ]; then
                echo "Scanning $APK_PATH with VirusTotal..."
                
                RESPONSE=$(curl -s \
                  --url https://www.virustotal.com/api/v3/files \
                  --header "x-apikey: $VIRUSTOTAL_API_KEY" \
                  --form file=@"$APK_PATH")
                
                if echo "$RESPONSE" | grep -q "id"; then
                  ANALYSIS_ID=$(echo "$RESPONSE" | jq -r '.data.id')
                  ANALYSIS_URL="https://www.virustotal.com/gui/file-analysis/$ANALYSIS_ID"
                  
                  # Try to get scan results (might be pending)
                  sleep 5
                  SCAN_RESPONSE=$(curl -s \
                    --url "https://www.virustotal.com/api/v3/analyses/$ANALYSIS_ID" \
                    --header "x-apikey: $VIRUSTOTAL_API_KEY")
                  
                  STATUS=$(echo "$SCAN_RESPONSE" | jq -r '.data.attributes.status' 2>/dev/null || echo "pending")
                  STATS=""
                  
                  if [ "$STATUS" = "completed" ]; then
                    MALICIOUS=$(echo "$SCAN_RESPONSE" | jq -r '.data.attributes.stats.malicious' 2>/dev/null || echo "?")
                    SUSPICIOUS=$(echo "$SCAN_RESPONSE" | jq -r '.data.attributes.stats.suspicious' 2>/dev/null || echo "?")
                    UNDETECTED=$(echo "$SCAN_RESPONSE" | jq -r '.data.attributes.stats.undetected' 2>/dev/null || echo "?")
                    STATS="$MALICIOUS malicious, $SUSPICIOUS suspicious, $UNDETECTED clean"
                  else
                    STATS="Scan pending"
                  fi
                  
                  # Update JSON with scan results
                  APK_INFO_JSON=$(echo "$APK_INFO_JSON" | jq --arg i "$i" --arg url "$ANALYSIS_URL" --arg stats "$STATS" --arg status "$STATUS" \
                    '.files[$i | tonumber].virus_total = {"url": $url, "stats": $stats, "status": $status}')
                else
                  echo "VirusTotal API error for $APK_PATH"
                  APK_INFO_JSON=$(echo "$APK_INFO_JSON" | jq --arg i "$i" \
                    '.files[$i | tonumber].virus_total = {"url": "Error", "stats": "API error", "status": "error"}')
                fi
              fi
            done
            
            echo "$APK_INFO_JSON" > apk_info.json
            echo "scan_results=$(cat apk_info.json | jq -c)" >> $GITHUB_OUTPUT
          else
            echo "VIRUSTOTAL_API_KEY not set, skipping scan"
            echo "scan_results=$(cat apk_info.json | jq -c)" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab
            apk_info.json
          retention-days: 7
          if-no-files-found: warn

  release:
    name: Publish Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: artifacts

      - name: Generate release notes
        run: |
          SCAN_RESULTS='${{ needs.build.outputs.scan_results }}'
          
          cat > release_notes.md << EOL
          # ${{ env.APP_NAME }} v${{ needs.test.outputs.version_name }} (build ${{ needs.test.outputs.version_code }})
          
          ![Build Status](https://github.com/${{ github.repository }}/actions/workflows/build-release.yml/badge.svg)
          
          ## 📱 Release Information
          - **Version**: ${{ needs.test.outputs.version_name }} (build ${{ needs.test.outputs.version_code }})
          - **Date**: $(date +'%B %d, %Y')
          - **Commit**: ${{ needs.test.outputs.commit_hash }}
          
          ## 📥 Downloads
          
          | Variant | Architecture | Size | VirusTotal | SHA-256 |
          |---------|--------------|------|------------|---------|
          $(echo "$SCAN_RESULTS" | jq -r '.files[] | "| [\(.name)](https://github.com/${{ github.repository }}/releases/download/v${{ needs.test.outputs.date_today }}-${{ needs.test.outputs.commit_hash }}/\(.name)) | \(.architecture) | \(.size) | [\(.virus_total.stats // \"Not scanned\")](\(.virus_total.url // \"#\")) | \(.sha256[0:8])... |"')
          
          ## 🔄 Recent Changes
          $(git log -10 --pretty=format:"- %s (%h)" --abbrev-commit)
          
          ## 📋 Installation Instructions
          1. Download the APK appropriate for your device architecture
          2. Enable "Install from Unknown Sources" in your device settings
          3. Install the application
          
          ## 📞 Support
          If you encounter any issues, please [open an issue](https://github.com/${{ github.repository }}/issues/new) on GitHub.
          EOL

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.APP_NAME }} v${{ needs.test.outputs.version_name }} (${{ needs.test.outputs.date_today }})
          tag_name: v${{ needs.test.outputs.date_today }}-${{ needs.test.outputs.commit_hash }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          body_path: release_notes.md
          files: |
            artifacts/**/*.apk
            artifacts/**/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}