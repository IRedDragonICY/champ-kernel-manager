name: Build and Release Android App

env:
  APP_NAME: Champ Kernel Manager

on:
  push:
    branches: [main, master, develop]
    tags: ['v*']
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.vars.outputs.commit_hash }}
      date_today: ${{ steps.vars.outputs.date_today }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        id: vars
        run: |
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "date_today=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          echo "build_number=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Run tests
        run: ./gradlew test --parallel

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: app/build/reports/tests/
          retention-days: 7
          if-no-files-found: ignore

  build:
    name: Build App
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      - name: Setup signing
        id: signing
        env:
          SIGNING_KEYSTORE_B64: ${{ secrets.SIGNING_KEYSTORE_B64 }}
        run: |
          if [ -n "$SIGNING_KEYSTORE_B64" ]; then
            echo "Keystore provided, configuring signing..."
            mkdir -p $HOME/keystore/
            echo "$SIGNING_KEYSTORE_B64" | base64 --decode > $HOME/keystore/release-key.jks
            echo "keystore_path=$HOME/keystore/release-key.jks" >> $GITHUB_OUTPUT
            echo "signing_configured=true" >> $GITHUB_OUTPUT
          else
            echo "No keystore provided, using debug signing..."
            echo "signing_configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Debug & Release in parallel
        run: |
          # Run builds in parallel
          ./gradlew assembleDebug bundleDebug --parallel &
          PID1=$!
          
          if [ "${{ steps.signing.outputs.signing_configured }}" == "true" ]; then
            ./gradlew assembleRelease bundleRelease \
              -Pandroid.injected.signing.store.file=${{ steps.signing.outputs.keystore_path }} \
              -Pandroid.injected.signing.store.password=${{ secrets.STORE_PASSWORD }} \
              -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
              -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }} \
              --parallel &
          else
            ./gradlew assembleRelease bundleRelease --parallel &
          fi
          PID2=$!
          
          wait $PID1 $PID2
          if [ $? -ne 0 ]; then
            echo "::error::Build process failed"
            exit 1
          fi

      - name: Scan with VirusTotal
        if: success() && secrets.VIRUSTOTAL_API_KEY != ''
        id: virustotal
        run: |
          APK_PATH=$(find app/build/outputs/apk -path "*/release/*.apk" | head -n 1)
          if [ -n "$APK_PATH" ] && [ -f "$APK_PATH" ]; then
            RESPONSE=$(curl -s \
              --url https://www.virustotal.com/api/v3/files \
              --header "x-apikey: ${{ secrets.VIRUSTOTAL_API_KEY }}" \
              --form file=@$APK_PATH)
            
            if echo "$RESPONSE" | grep -q "id"; then
              ANALYSIS_ID=$(echo $RESPONSE | jq -r '.data.id')
              echo "analysis_url=https://www.virustotal.com/gui/file-analysis/$ANALYSIS_ID" >> $GITHUB_OUTPUT
            else
              echo "analysis_url=Not available (API error)" >> $GITHUB_OUTPUT
            fi
          else
            echo "analysis_url=Not available (APK not found)" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        run: |
          cat > release_notes.md << EOL
          # ${{ env.APP_NAME }} - Build ${{ env.build_number }}
          
          ![Build Status](https://github.com/${{ github.repository }}/actions/workflows/build.yml/badge.svg)
          
          ## ðŸ“± Release Information
          - **Version**: ${{ needs.test.outputs.date_today }}-${{ needs.test.outputs.commit_hash }}
          - **Build Date**: $(date +'%B %d, %Y')
          
          ## ðŸ”’ Security
          - [VirusTotal Scan Results](${{ steps.virustotal.outputs.analysis_url || 'Not available' }})
          
          ## ðŸ“‹ Recent Changes
          $(git log -10 --pretty=format:"- %s (%h)" --abbrev-commit)
          
          ## ðŸ“¥ Installation
          1. Download the APK file
          2. Enable "Install from Unknown Sources" in your device settings
          3. Install the application
          
          ## ðŸ“ž Support
          If you encounter any issues, please [open an issue](https://github.com/${{ github.repository }}/issues/new) on GitHub.
          EOL

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-outputs
          path: |
            app/build/outputs/apk/debug/*.apk
            app/build/outputs/apk/release/*.apk
            app/build/outputs/bundle/release/*.aab
            release_notes.md
          retention-days: 7
          if-no-files-found: warn

  release:
    name: Publish Release
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-outputs
          path: artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ env.APP_NAME }} - ${{ needs.test.outputs.date_today }} (${{ needs.test.outputs.commit_hash }})
          tag_name: v${{ needs.test.outputs.date_today }}-${{ needs.test.outputs.commit_hash }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          body_path: artifacts/release_notes.md
          files: |
            artifacts/**/*.apk
            artifacts/**/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}